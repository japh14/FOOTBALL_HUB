"""
Django settings for api_football project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# The directory UP one level from BASE_DIR (i.e., the project root /root/)
PROJECT_ROOT_DIR = BASE_DIR.parent

# Loading .env file based on environment
load_dotenv(dotenv_path=PROJECT_ROOT_DIR / '.env')

# Determine the environment: 'prod', 'dev', or 'local' (default)
environ = os.getenv('ENVIRONMENT', 'local')

print(f'Info: Loading settings for environment: {environ}')
if environ == 'prod':
    load_dotenv(dotenv_path=PROJECT_ROOT_DIR / '.env.prod', override=True)
elif environ == 'local':
    load_dotenv(dotenv_path=PROJECT_ROOT_DIR / '.env.local', override=True)
else:
    load_dotenv(dotenv_path=PROJECT_ROOT_DIR / '.env.dev', override=True)

# Load required environment variables
_DEBUG = os.getenv('_DEBUG', 'True') == 'True'

# Whether to use PostgreSQL or SQLite
USE_POSTGRES = os.getenv('USE_POSTGRES', 'True') == 'True'

# Football API key
API_KEY = os.getenv('API_KEY', '')

# Allowed hosts configuration
_ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost').split(',')

# Secret key for Django
_SECRET_KEY = os.getenv('_SECRET_KEY','')

# Database configuration
DB_HOST = os.environ.get('DATABASE_HOST', 'localhost')
DB_PORT = os.environ.get('DATABASE_PORT', '5432')
DB_USER = os.environ.get('DATABASE_USER', 'myuser')
DB_PASS = os.environ.get('DATABASE_PASSWORD', 'mypassword')
DB_NAME = os.environ.get('DATABASE_NAME', 'mydatabase')

# Print loaded environment variables for verification
print('Info: Loaded environment variables:')
print(f'\tUsing settings for environment: {environ}')
print(f'\tDebug mode: {"ON" if _DEBUG else "OFF"}')
print(f'\tUsing database: {"PostgreSQL" if USE_POSTGRES else "SQLite"}')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = _SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = _DEBUG

ALLOWED_HOSTS = _ALLOWED_HOSTS

# --- CORS Configuration ---

# Define the origins (URLs) that are allowed to access your API
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",       # Your local React/Node dev server
    "http://127.0.0.1:3000",       # Another common local variation
    # Add your production frontend domain here later (e.g., "https://yourfrontend.com")
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

EXETERNAL_APPS = [
    
    # Third-party packages
    'rest_framework',      # For building the API
    'rest_framework_simplejwt', # For JWT Authentication
    'corsheaders',         # For handling Cross-Origin requests

    # My apps
    'core',
    'users',
]

INSTALLED_APPS+=EXETERNAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 1. CORS Middleware MUST be first
MIDDLEWARE.insert(0, 'corsheaders.middleware.CorsMiddleware')

if not DEBUG:
    # Whitenoise for static files (recommended)
    MIDDLEWARE+=['whitenoise.middleware.WhiteNoiseMiddleware']
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

    # Security settings for production
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'

ROOT_URLCONF = 'api_football.urls'

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer', # Optional: for the browser interface
    ],
    # Example default permission: allow read access to anyone, but require login for write/edit
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.AllowAny', # Allow All
        # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly', # Auth for write, anonymous read
        'rest_framework.permissions.IsAuthenticated',  # default: all endpoints require auth
    ]
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'AUTH_HEADER_TYPES': ('Bearer',),
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api_football.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if USE_POSTGRES:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': DB_NAME,
            'USER': DB_USER,
            'PASSWORD': DB_PASS,
            'HOST': DB_HOST,
            'PORT': DB_PORT,
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# STATIC_URL = 'static/'

# Static files
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [BASE_DIR / 'static'] if (BASE_DIR / 'static').exists() else []

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
